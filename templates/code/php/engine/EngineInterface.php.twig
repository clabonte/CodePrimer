{# This template generates an interface defining the list of methods that must be implemented by an engine instance
 #}
<?php
{% block file_comments %}
/*
 * This file has been generated by CodePrimer.io
 *
    {%- if bundle.copyright %}
        * (c) {{ bundle.copyright }}
        *
    {% endif ~%}
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
{% endblock %}

namespace {{ bundle|namespace }};

{# Block: includes
 # Allow children to provide the list classes to include if needed.
 # Empty by default
 #}
{% block includes %}
    {%~ for event in events %}
use {{ bundle|namespace('Event') }}\{{ event|class }};
    {%~ endfor %}

{% endblock %}

{#- Block: class_comments
 # Provide PHPDoc comments describing the class
 #}
{% block class_comments %}
/**
 * {{ model|class }}
 * This interface defines the list of methods that must be implemented to implement a business engine
 * @package {{ bundle|namespace }}
 */
{% endblock %}

interface {{ model|class }}
{
{% for process in processes %}
    /**
     * Process: {{ process.name }}
     * {{ process.description }}
     * @param {{ process.event|class }} {{ process.event|variable }}
    {%~ if (not process.returnedData is empty)  %}
     * @return {{ process.returnedData|hint }}
    {%~ endif  %}
     */
    {%~ if (process.returnedData is empty)  %}
    public function {{ process|onMethod }}({{ process.event|class }} {{ process.event|variable }});
    {%~ elseif (process.returnedData.isListStructure()) %}
    public function {{ process|onMethod }}({{ process.event|class }} {{ process.event|variable }}): array;
    {%~ else %}
    public function {{ process|onMethod }}({{ process.event|class }} {{ process.event|variable }}): {{ process.returnedData|class }};
    {%~ endif  %}

{% endfor %}
}