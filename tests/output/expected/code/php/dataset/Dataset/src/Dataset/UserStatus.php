<?php
/*
 * This file has been generated by CodePrimer.io
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace CodePrimer\Tests\Dataset;

    use \InvalidArgumentException;

/**
 * Class UserStatus
 * List of statuses that can be associated with a User
 * @package CodePrimer\Tests\Dataset
 */
class UserStatus
{
    /** @var string User is registered but has not confirmed his email address yet */
    const REGISTERED = 'registered';
    /** @var string User is fully registered and allowed to user our application */
    const ACTIVE = 'active';
    /** @var string User has canceled his subscription with our application */
    const CANCELED = 'canceled';
    /** @var string User has been locked due to too many failed login attempts */
    const LOCKED = 'locked';

    /** @var UserStatus[] List of elements that are part of this Dataset */
    static private $elements = [];

    /** @var string  */
    protected $name = '';

    /** @var string  */
    protected $description = '';

    /** @var bool  */
    protected $loginAllowed;


    /**
     * UserStatus default constructor
     * @var string $name 
     * @var string $description 
     * @var bool $loginAllowed 
     */
    private function __construct(
        string $name,
        string $description,
        bool $loginAllowed
    ) {
        $this->name = $name;
        $this->description = $description;
        $this->loginAllowed = $loginAllowed;
    }

    /**
     * @codeCoverageIgnore
     * @return string
     */
    public function getName(): string
    {
        return $this->name;
    }

    /**
     * @codeCoverageIgnore
     * @return string
     */
    public function getDescription(): string
    {
        return $this->description;
    }

    /**
     * @codeCoverageIgnore
     * @return bool
     */
    public function isLoginAllowed(): bool
    {
        return $this->loginAllowed;
    }

    /**
     * Retrieves a UserStatus by its identifier.
     * @param string $name One of the constants defined in this class
     * @return UserStatus
     * @throws InvalidArgumentException If the $name does not map to a valid element in this dataset.
     */
    public static function byName(string $name): UserStatus
    {
        if (empty(self::$elements)) {
            self::initElements();
        }

        if (!isset(self::$elements[$name])) {
            throw new InvalidArgumentException("Unknown element '$name' specified. Must be one of the constants defined in UserStatus");
        }
        return self::$elements[$name];
    }

    private static function initElements()
    {
        self::$elements['registered'] = new UserStatus(
                'registered',
                'User is registered but has not confirmed his email address yet',
                true
        );

        self::$elements['active'] = new UserStatus(
                'active',
                'User is fully registered and allowed to user our application',
                true
        );

        self::$elements['canceled'] = new UserStatus(
                'canceled',
                'User has canceled his subscription with our application',
                false
        );

        self::$elements['locked'] = new UserStatus(
                'locked',
                'User has been locked due to too many failed login attempts',
                false
        );

    }
}
