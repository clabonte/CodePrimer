<?php
/*
 * This file has been generated by CodePrimer.io
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace CodePrimer\Tests\Dataset;

use \InvalidArgumentException;

/**
 * Class Plan
 * List of plans that can be purchased in our application along with their access
 * @package CodePrimer\Tests\Dataset
 */
class Plan
{
    /** @var int Internal plan used to manage the application */
    const ADMIN = 1;
    /** @var int Free plan giving access to basic functionality to registered users */
    const FREE = 2;
    /** @var int Premium plan giving access to premium functionality to registered users */
    const PREMIUM = 3;
    /** @var int Premium plan giving access to premium and editing functionality to registered users */
    const AUTHOR = 4;

    /** @var Plan[] List of elements that are part of this Dataset */
    static private $elements = [];

    /** @var int Unique ID to use for this plan */
    protected $id;

    /** @var string The name associated with this plan, as presented to users and prospects */
    protected $name = '';

    /** @var string A description of the plan, as presented to users and prospects */
    protected $description = '';

    /** @var bool Whether this plan can only be used internally or available for purchase */
    protected $internal;

    /** @var bool Whether this plan can still be used for new/upgraded accounts */
    protected $active;

    /** @var float The selling price for a contract renewable on a monthly basis */
    protected $monthlyPrice;

    /** @var float The selling price for a contract renewable on a yearly basis */
    protected $annualPrice;

    /** @var bool Whether this plan provides access to premium content */
    protected $premiumAccess;

    /** @var bool Whether this plan provides access to editing content */
    protected $editingAccess;

    /** @var bool Whether this plan provides access to admin functionality */
    protected $adminAccess;


    /**
     * Plan default constructor
     * @var int $id Unique ID to use for this plan
     * @var string $name The name associated with this plan, as presented to users and prospects
     * @var string $description A description of the plan, as presented to users and prospects
     * @var bool $internal Whether this plan can only be used internally or available for purchase
     * @var bool $active Whether this plan can still be used for new/upgraded accounts
     * @var float $monthlyPrice The selling price for a contract renewable on a monthly basis
     * @var float $annualPrice The selling price for a contract renewable on a yearly basis
     * @var bool $premiumAccess Whether this plan provides access to premium content
     * @var bool $editingAccess Whether this plan provides access to editing content
     * @var bool $adminAccess Whether this plan provides access to admin functionality
     */
    private function __construct(
        int $id,
        string $name,
        string $description,
        bool $internal,
        bool $active,
        float $monthlyPrice,
        float $annualPrice,
        bool $premiumAccess,
        bool $editingAccess,
        bool $adminAccess
    ) {
        $this->id = $id;
        $this->name = $name;
        $this->description = $description;
        $this->internal = $internal;
        $this->active = $active;
        $this->monthlyPrice = $monthlyPrice;
        $this->annualPrice = $annualPrice;
        $this->premiumAccess = $premiumAccess;
        $this->editingAccess = $editingAccess;
        $this->adminAccess = $adminAccess;
    }

    /**
     * @codeCoverageIgnore
     * @return int
     */
    public function getId(): int
    {
        return $this->id;
    }

    /**
     * @codeCoverageIgnore
     * @return string
     */
    public function getName(): string
    {
        return $this->name;
    }

    /**
     * @codeCoverageIgnore
     * @return string
     */
    public function getDescription(): string
    {
        return $this->description;
    }

    /**
     * @codeCoverageIgnore
     * @return bool
     */
    public function isInternal(): bool
    {
        return $this->internal;
    }

    /**
     * @codeCoverageIgnore
     * @return bool
     */
    public function isActive(): bool
    {
        return $this->active;
    }

    /**
     * @codeCoverageIgnore
     * @return float
     */
    public function getMonthlyPrice(): float
    {
        return $this->monthlyPrice;
    }

    /**
     * @codeCoverageIgnore
     * @return float
     */
    public function getAnnualPrice(): float
    {
        return $this->annualPrice;
    }

    /**
     * @codeCoverageIgnore
     * @return bool
     */
    public function isPremiumAccess(): bool
    {
        return $this->premiumAccess;
    }

    /**
     * @codeCoverageIgnore
     * @return bool
     */
    public function isEditingAccess(): bool
    {
        return $this->editingAccess;
    }

    /**
     * @codeCoverageIgnore
     * @return bool
     */
    public function isAdminAccess(): bool
    {
        return $this->adminAccess;
    }

    /**
     * Retrieves a Plan by its identifier.
     * @param int $id One of the constants defined in this class
     * @return Plan
     * @throws InvalidArgumentException If the $id does not map to a valid element in this dataset.
     */
    public static function byId(int $id): Plan
    {
        if (empty(self::$elements)) {
            self::initElements();
        }

        if (!isset(self::$elements[$id])) {
            throw new InvalidArgumentException("Unknown element '$id' specified. Must be one of the constants defined in Plan");
        }
        return self::$elements[$id];
    }

    private static function initElements()
    {
        self::$elements[1] = new Plan(
                1,
                'Admin',
                'Internal plan used to manage the application',
                true,
                true,
                0,
                0,
                true,
                true,
                true
        );

        self::$elements[2] = new Plan(
                2,
                'Free',
                'Free plan giving access to basic functionality to registered users',
                false,
                true,
                0,
                0,
                false,
                false,
                false
        );

        self::$elements[3] = new Plan(
                3,
                'Premium',
                'Premium plan giving access to premium functionality to registered users',
                false,
                true,
                5,
                50,
                true,
                false,
                false
        );

        self::$elements[4] = new Plan(
                4,
                'Author',
                'Premium plan giving access to premium and editing functionality to registered users',
                false,
                true,
                10,
                100,
                true,
                true,
                false
        );

    }
}
