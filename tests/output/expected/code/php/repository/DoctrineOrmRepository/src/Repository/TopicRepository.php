<?php
/*
 * This file has been generated by CodePrimer.io
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace CodePrimer\Tests\Repository;

use CodePrimer\Tests\Entity\Topic;
use CodePrimer\Tests\Entity\User;
use CodePrimer\Tests\Entity\Post;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Common\Persistence\ManagerRegistry;
use Doctrine\ORM\NonUniqueResultException;
use Doctrine\ORM\NoResultException;
use Psr\Log\LoggerInterface;

/**
 * Class TopicRepository
 * Manipulates Topic entities with the persistence layer.
 * @package CodePrimer\Tests\Repository
 * @method Topic|null find($id, $lockMode = null, $lockVersion = null)
 * @method Topic|null findOneBy(array $criteria, array $orderBy = null)
 * @method Topic[]    findAll()
 * @method Topic[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class TopicRepository extends ServiceEntityRepository
{
    /** @var LoggerInterface */
    private $logger;

    /**
     * @param ManagerRegistry $registry
     */
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Topic::class);
    }

    /**
     * @required
     * @param LoggerInterface $logger
     */
    public function setLogger(LoggerInterface $logger)
    {
        $this->logger = $logger;
    }

    /**
     * Retrieves a list of Topic linked to a given User
     * @param User $author
     * @param bool $mostRecentFirst
     * @return Topic[]
     */
    public function findAllByUser(User $author, bool $mostRecentFirst = true): array
    {
        return $this->createQueryBuilder('u')
            ->andWhere('u.author = :author')
            ->setParameter('author', $author)
            ->orderBy('u.created', $mostRecentFirst ? 'DESC' : 'ASC')
            ->getQuery()
            ->getResult();
    }

    /**
     * Retrieves a Topic linked to a given Post
     * @param Post $post
     * @return Topic|null
     */
    public function getByPost(Post $post): ?Topic
    {
        try {
            return $this->createQueryBuilder('u')
                ->andWhere('u.post = :post')
                ->setParameter('post', $post)
                ->getQuery()
                ->getSingleResult();
        } catch (NoResultException $e) {
            $this->logger->notice('No result found: ' .$e->getMessage(), [
                'post' => $post,
                'exception' => $e
            ]);
        } catch (NonUniqueResultException $e) {
            $this->logger->error('Multiple results found: '.$e->getMessage(), [
                'post' => $post,
                'exception' => $e
            ]);
        }

        return null;
    }

}
