<?php
/*
 * This file has been generated by CodePrimer.io
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace CodePrimer\Tests\Repository;

use CodePrimer\Tests\Entity\Subscription;
use CodePrimer\Tests\Entity\User;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Common\Persistence\ManagerRegistry;
use Doctrine\ORM\NonUniqueResultException;
use Doctrine\ORM\NoResultException;
use Psr\Log\LoggerInterface;

/**
 * Class SubscriptionRepository
 * Manipulates Subscription entities with the persistence layer.
 * @package CodePrimer\Tests\Repository
 * @method Subscription|null find($id, $lockMode = null, $lockVersion = null)
 * @method Subscription|null findOneBy(array $criteria, array $orderBy = null)
 * @method Subscription[]    findAll()
 * @method Subscription[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class SubscriptionRepository extends ServiceEntityRepository
{
    /** @var LoggerInterface */
    private $logger;

    /**
     * @param ManagerRegistry $registry
     */
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Subscription::class);
    }

    /**
     * @required
     * @param LoggerInterface $logger
     */
    public function setLogger(LoggerInterface $logger)
    {
        $this->logger = $logger;
    }

    /**
     * Retrieves a Subscription linked to a given User
     * @param User $user
     * @return Subscription|null
     */
    public function getByUser(User $user): ?Subscription
    {
        try {
            return $this->createQueryBuilder('u')
                ->andWhere('u.user = :user')
                ->setParameter('user', $user)
                ->getQuery()
                ->getSingleResult();
        } catch (NoResultException $e) {
            $this->logger->notice('No result found: ' .$e->getMessage(), [
                'user' => $user,
                'exception' => $e
            ]);
        } catch (NonUniqueResultException $e) {
            $this->logger->error('Multiple results found: '.$e->getMessage(), [
                'user' => $user,
                'exception' => $e
            ]);
        }

        return null;
    }

}
