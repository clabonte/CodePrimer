<?php
/*
 * This file has been generated by CodePrimer.io
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace CodePrimer\Tests\Entity;

use \DateTime;
use \DateTimeInterface;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\ORM\Mapping as ORM;

/**
 * Class User
 * This entity represents a user
 * @package CodePrimer\Tests\Entity
 * @ORM\Entity(repositoryClass="App\Repository\UserRepository")
 * @ORM\Table(name="users", uniqueConstraints={@ORM\UniqueConstraint(name="uniqueEmail", columns={"email"}), @ORM\UniqueConstraint(name="uniqueNickname", columns={"nickname"})}, indexes={@ORM\Index(name="first_name_idx", columns={"first_name"}), @ORM\Index(name="last_name_idx", columns={"last_name"}), @ORM\Index(name="nickname_idx", columns={"nickname"}), @ORM\Index(name="email_idx", columns={"email"}), @ORM\Index(name="stats_id_idx", columns={"stats_id"}), @ORM\Index(name="subscription_id_idx", columns={"subscription_id"})})
 */
class User
{
    /**
     * @var string The user's unique ID in our system
     * @ORM\Id()
     * @ORM\GeneratedValue(strategy="UUID")
     * @ORM\Column(name="id", type="string", length=36)
     */
    protected $id = '';

    /**
     * @var string|null User first name
     * @ORM\Column(name="first_name", type="string", length=255, nullable=true)
     */
    protected $firstName = null;

    /**
     * @var string|null User last name
     * @ORM\Column(name="last_name", type="string", length=255, nullable=true)
     */
    protected $lastName = null;

    /**
     * @var string|null The name used to identify this user publicly on the site
     * @ORM\Column(name="nickname", type="string", length=255, nullable=true)
     */
    protected $nickname = null;

    /**
     * @var string User email address
     * @ORM\Column(name="email", type="string", length=255)
     */
    protected $email = '';

    /**
     * @var string User password
     * @ORM\Column(name="password", type="string", length=255)
     */
    protected $password = '';

    /**
     * @var DateTimeInterface|null The date and time at which this user was created
     * @ORM\Column(name="created", type="datetime", nullable=true)
     */
    protected $created = null;

    /**
     * @var DateTimeInterface|null The date and time at which this user was updated
     * @ORM\Column(name="updated", type="datetime", nullable=true)
     */
    protected $updated = null;

    /**
     * @var string|null The ID of this user in our external CRM
     * @ORM\Column(name="crm_id", type="string", length=255, nullable=true)
     */
    protected $crmId = null;

    /**
     * @var string|null The code required to validate the user's account
     * @ORM\Column(name="activation_code", type="string", length=255, nullable=true)
     */
    protected $activationCode = null;

    /**
     * @var UserStats|null User login statistics
     * @ORM\OneToOne(targetEntity="CodePrimer\Tests\Entity\UserStats", cascade={"persist", "remove"})
     */
    protected $stats = null;

    /**
     * @var Subscription|null The plan to which the user is subscribed
     * @ORM\OneToOne(targetEntity="CodePrimer\Tests\Entity\Subscription", inversedBy="user")
     */
    protected $subscription = null;

    /**
     * @var Collection|Metadata[]|null Extra information about the user
     * @ORM\OneToMany(targetEntity="CodePrimer\Tests\Entity\Metadata", mappedBy="user", cascade={"persist", "remove", "merge"}, orphanRemoval=true)
     */
    protected $metadata = null;

    /**
     * @var Collection|Post[]|null Blog posts created by this user
     * @ORM\OneToMany(targetEntity="CodePrimer\Tests\Entity\Post", mappedBy="author", cascade={"persist", "remove", "merge"}, orphanRemoval=true)
     */
    protected $posts = null;

    /**
     * @var Collection|Topic[]|null List of topics this user to allowed to create posts for
     * @ORM\ManyToMany(targetEntity="CodePrimer\Tests\Entity\Topic", mappedBy="authors")
     */
    protected $topics = null;

    /**
     * User default constructor
     * @var string $id The user's unique ID in our system
     * @var string $email User email address
     * @var string $password User password
     */
    public function __construct(
        string $id,
        string $email,
        string $password
    ) {
        $this->id = $id;
        $this->email = $email;
        $this->password = $password;
        $this->metadata = new ArrayCollection();
        $this->posts = new ArrayCollection();
        $this->topics = new ArrayCollection();
    }

    /**
     * @codeCoverageIgnore
     * @param string $id
     * @return User
     */
    public function setId(string $id): User
    {
        $this->id = $id;
        return $this;
    }

    /**
     * @codeCoverageIgnore
     * @return string
     */
    public function getId(): string
    {
        return $this->id;
    }

    /**
     * @codeCoverageIgnore
     * @param string|null $firstName
     * @return User
     */
    public function setFirstName(?string $firstName): User
    {
        $this->firstName = $firstName;
        return $this;
    }

    /**
     * @codeCoverageIgnore
     * @return string|null
     */
    public function getFirstName(): ?string
    {
        return $this->firstName;
    }

    /**
     * @codeCoverageIgnore
     * @param string|null $lastName
     * @return User
     */
    public function setLastName(?string $lastName): User
    {
        $this->lastName = $lastName;
        return $this;
    }

    /**
     * @codeCoverageIgnore
     * @return string|null
     */
    public function getLastName(): ?string
    {
        return $this->lastName;
    }

    /**
     * @codeCoverageIgnore
     * @param string|null $nickname
     * @return User
     */
    public function setNickname(?string $nickname): User
    {
        $this->nickname = $nickname;
        return $this;
    }

    /**
     * @codeCoverageIgnore
     * @return string|null
     */
    public function getNickname(): ?string
    {
        return $this->nickname;
    }

    /**
     * @codeCoverageIgnore
     * @param string $email
     * @return User
     */
    public function setEmail(string $email): User
    {
        $this->email = $email;
        return $this;
    }

    /**
     * @codeCoverageIgnore
     * @return string
     */
    public function getEmail(): string
    {
        return $this->email;
    }

    /**
     * @codeCoverageIgnore
     * @param string $password
     * @return User
     */
    public function setPassword(string $password): User
    {
        $this->password = $password;
        return $this;
    }

    /**
     * @codeCoverageIgnore
     * @return string
     */
    public function getPassword(): string
    {
        return $this->password;
    }

    /**
     * @codeCoverageIgnore
     * @param DateTimeInterface|null $created
     * @return User
     */
    public function setCreated(?DateTimeInterface $created): User
    {
        $this->created = $created;
        return $this;
    }

    /**
     * @codeCoverageIgnore
     * @return DateTimeInterface|null
     */
    public function getCreated(): ?DateTimeInterface
    {
        return $this->created;
    }

    /**
     * @codeCoverageIgnore
     * @param DateTimeInterface|null $updated
     * @return User
     */
    public function setUpdated(?DateTimeInterface $updated): User
    {
        $this->updated = $updated;
        return $this;
    }

    /**
     * @codeCoverageIgnore
     * @return DateTimeInterface|null
     */
    public function getUpdated(): ?DateTimeInterface
    {
        return $this->updated;
    }

    /**
     * @codeCoverageIgnore
     * @param string|null $crmId
     * @return User
     */
    public function setCrmId(?string $crmId): User
    {
        $this->crmId = $crmId;
        return $this;
    }

    /**
     * @codeCoverageIgnore
     * @return string|null
     */
    public function getCrmId(): ?string
    {
        return $this->crmId;
    }

    /**
     * @codeCoverageIgnore
     * @param string|null $activationCode
     * @return User
     */
    public function setActivationCode(?string $activationCode): User
    {
        $this->activationCode = $activationCode;
        return $this;
    }

    /**
     * @codeCoverageIgnore
     * @return string|null
     */
    public function getActivationCode(): ?string
    {
        return $this->activationCode;
    }

    /**
     * @codeCoverageIgnore
     * @param UserStats|null $stats
     * @return User
     */
    public function setStats(?UserStats $stats): User
    {
        $this->stats = $stats;
        return $this;
    }

    /**
     * @codeCoverageIgnore
     * @return UserStats|null
     */
    public function getStats(): ?UserStats
    {
        return $this->stats;
    }

    /**
     * @codeCoverageIgnore
     * @param Subscription|null $subscription
     * @return User
     */
    public function setSubscription(?Subscription $subscription): User
    {
        $this->subscription = $subscription;
        return $this;
    }

    /**
     * @codeCoverageIgnore
     * @return Subscription|null
     */
    public function getSubscription(): ?Subscription
    {
        return $this->subscription;
    }

    /**
     * @codeCoverageIgnore
     * @param Collection|Metadata[]|null $metadata
     * @return User
     */
    public function setMetadata(Collection $metadata): User
    {
        $this->metadata = $metadata;
        return $this;
    }

    /**
     * @codeCoverageIgnore
     * @return Collection|Metadata[]|null
     */
    public function getMetadata(): Collection
    {
        return $this->metadata;
    }

    /**
     * @codeCoverageIgnore
     * @param Collection|Post[]|null $posts
     * @return User
     */
    public function setPosts(Collection $posts): User
    {
        $this->posts = $posts;
        return $this;
    }

    /**
     * @codeCoverageIgnore
     * @return Collection|Post[]|null
     */
    public function getPosts(): Collection
    {
        return $this->posts;
    }

    /**
     * @codeCoverageIgnore
     * @param Collection|Topic[]|null $topics
     * @return User
     */
    public function setTopics(Collection $topics): User
    {
        $this->topics = $topics;
        return $this;
    }

    /**
     * @codeCoverageIgnore
     * @return Collection|Topic[]|null
     */
    public function getTopics(): Collection
    {
        return $this->topics;
    }


    /**
     * Checks if this User contains at least one instance of a given Metadata
     * @param Metadata $metadata
     * @return boolean
     */
    public function containsMetadata(Metadata $metadata): boolean
    {
        return $this->metadata->contains($metadata);
    }

    /**
     * Adds a Metadata instance to this User if it is not already present
     * @param Metadata $metadata
     * @return User
     */
    public function addMetadata(Metadata $metadata): User
    {
        if (!$this->metadata->contains($metadata)) {
            $this->metadata[] = $metadata;
            $metadata->setUser($this);
        }

        return $this;
    }

    /**
     * Removes all instances of a given Metadata from this User
     * @param Metadata $metadata
     * @return User
     */
    public function removeMetadata(Metadata $metadata): User
    {
        if ($this->metadata->contains($metadata)) {
            $this->metadata->removeElement($metadata);
            // set the owning side to null (unless already changed)
            if ($metadata->getUser() === $this) {
                $metadata->setUser(null);
            }
        }

        return $this;
    }

    /**
     * Checks if this User contains at least one instance of a given Post
     * @param Post $posts
     * @return boolean
     */
    public function containsPost(Post $posts): boolean
    {
        return $this->posts->contains($posts);
    }

    /**
     * Adds a Post instance to this User if it is not already present
     * @param Post $posts
     * @return User
     */
    public function addPost(Post $posts): User
    {
        if (!$this->posts->contains($posts)) {
            $this->posts[] = $posts;
            $posts->setAuthor($this);
        }

        return $this;
    }

    /**
     * Removes all instances of a given Post from this User
     * @param Post $posts
     * @return User
     */
    public function removePost(Post $posts): User
    {
        if ($this->posts->contains($posts)) {
            $this->posts->removeElement($posts);
            // set the owning side to null (unless already changed)
            if ($posts->getAuthor() === $this) {
                $posts->setAuthor(null);
            }
        }

        return $this;
    }

    /**
     * Checks if this User contains at least one instance of a given Topic
     * @param Topic $topics
     * @return boolean
     */
    public function containsTopic(Topic $topics): boolean
    {
        return $this->topics->contains($topics);
    }

    /**
     * Adds a Topic instance to this User if it is not already present
     * @param Topic $topics
     * @return User
     */
    public function addTopic(Topic $topics): User
    {
        if (!$this->topics->contains($topics)) {
            $this->topics[] = $topics;
            $topics->setAuthors($this);
        }

        return $this;
    }

    /**
     * Removes all instances of a given Topic from this User
     * @param Topic $topics
     * @return User
     */
    public function removeTopic(Topic $topics): User
    {
        if ($this->topics->contains($topics)) {
            $this->topics->removeElement($topics);
            // set the owning side to null (unless already changed)
            if ($topics->getAuthors() === $this) {
                $topics->setAuthors(null);
            }
        }

        return $this;
    }
    /**
     * Automatically manage timestamps upon entity creation
     * @ORM\PrePersist
     */
    public function updateTimestampsBeforePersist(): void
    {
        $this->updated = new DateTime('now');
        if ($this->created === null) {
            $this->created = new DateTime('now');
        }
    }

    /**
     * Automatically manage timestamp upon entity update
     * @ORM\PreUpdate
     */
    public function updateTimestampBeforeUpdate(): void
    {
        $this->updated = new DateTime('now');
    }
}
