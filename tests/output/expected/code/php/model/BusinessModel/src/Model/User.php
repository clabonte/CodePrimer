<?php
/*
 * This file has been generated by CodePrimer.io
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace CodePrimer\Tests\Model;

use \DateTimeInterface;

/**
 * Class User
 * This entity represents a user
 * @package CodePrimer\Tests\Model
 */
class User
{
    /** @var string The user's unique ID in our system */
    protected $id = '';

    /** @var string|null User first name */
    protected $firstName = null;

    /** @var string|null User last name */
    protected $lastName = null;

    /** @var string|null The name used to identify this user publicly on the site */
    protected $nickname = null;

    /** @var string User email address */
    protected $email = '';

    /** @var string User password */
    protected $password = '';

    /** @var DateTimeInterface|null The date and time at which this user was created */
    protected $created = null;

    /** @var DateTimeInterface|null The date and time at which this user was updated */
    protected $updated = null;

    /** @var string|null The ID of this user in our external CRM */
    protected $crmId = null;

    /** @var string|null The code required to validate the user's account */
    protected $activationCode = null;

    /** @var UserStats|null User login statistics */
    protected $stats = null;

    /** @var Subscription|null The plan to which the user is subscribed */
    protected $subscription = null;

    /** @var Metadata[]|null Extra information about the user */
    protected $metadata = null;

    /** @var Post[]|null Blog posts created by this user */
    protected $posts = null;

    /** @var Topic[]|null List of topics this user to allowed to create posts for */
    protected $topics = null;

    /**
     * User default constructor
     * @var string $id The user's unique ID in our system
     * @var string $email User email address
     * @var string $password User password
     */
    public function __construct(
        string $id,
        string $email,
        string $password
    ) {
        $this->id = $id;
        $this->email = $email;
        $this->password = $password;
    }

    /**
     * @codeCoverageIgnore
     * @param string $id
     * @return User
     */
    public function setId(string $id): User
    {
        $this->id = $id;
        return $this;
    }

    /**
     * @codeCoverageIgnore
     * @return string
     */
    public function getId(): string
    {
        return $this->id;
    }

    /**
     * @codeCoverageIgnore
     * @param string|null $firstName
     * @return User
     */
    public function setFirstName(?string $firstName): User
    {
        $this->firstName = $firstName;
        return $this;
    }

    /**
     * @codeCoverageIgnore
     * @return string|null
     */
    public function getFirstName(): ?string
    {
        return $this->firstName;
    }

    /**
     * @codeCoverageIgnore
     * @param string|null $lastName
     * @return User
     */
    public function setLastName(?string $lastName): User
    {
        $this->lastName = $lastName;
        return $this;
    }

    /**
     * @codeCoverageIgnore
     * @return string|null
     */
    public function getLastName(): ?string
    {
        return $this->lastName;
    }

    /**
     * @codeCoverageIgnore
     * @param string|null $nickname
     * @return User
     */
    public function setNickname(?string $nickname): User
    {
        $this->nickname = $nickname;
        return $this;
    }

    /**
     * @codeCoverageIgnore
     * @return string|null
     */
    public function getNickname(): ?string
    {
        return $this->nickname;
    }

    /**
     * @codeCoverageIgnore
     * @param string $email
     * @return User
     */
    public function setEmail(string $email): User
    {
        $this->email = $email;
        return $this;
    }

    /**
     * @codeCoverageIgnore
     * @return string
     */
    public function getEmail(): string
    {
        return $this->email;
    }

    /**
     * @codeCoverageIgnore
     * @param string $password
     * @return User
     */
    public function setPassword(string $password): User
    {
        $this->password = $password;
        return $this;
    }

    /**
     * @codeCoverageIgnore
     * @return string
     */
    public function getPassword(): string
    {
        return $this->password;
    }

    /**
     * @codeCoverageIgnore
     * @param DateTimeInterface|null $created
     * @return User
     */
    public function setCreated(?DateTimeInterface $created): User
    {
        $this->created = $created;
        return $this;
    }

    /**
     * @codeCoverageIgnore
     * @return DateTimeInterface|null
     */
    public function getCreated(): ?DateTimeInterface
    {
        return $this->created;
    }

    /**
     * @codeCoverageIgnore
     * @param DateTimeInterface|null $updated
     * @return User
     */
    public function setUpdated(?DateTimeInterface $updated): User
    {
        $this->updated = $updated;
        return $this;
    }

    /**
     * @codeCoverageIgnore
     * @return DateTimeInterface|null
     */
    public function getUpdated(): ?DateTimeInterface
    {
        return $this->updated;
    }

    /**
     * @codeCoverageIgnore
     * @param string|null $crmId
     * @return User
     */
    public function setCrmId(?string $crmId): User
    {
        $this->crmId = $crmId;
        return $this;
    }

    /**
     * @codeCoverageIgnore
     * @return string|null
     */
    public function getCrmId(): ?string
    {
        return $this->crmId;
    }

    /**
     * @codeCoverageIgnore
     * @param string|null $activationCode
     * @return User
     */
    public function setActivationCode(?string $activationCode): User
    {
        $this->activationCode = $activationCode;
        return $this;
    }

    /**
     * @codeCoverageIgnore
     * @return string|null
     */
    public function getActivationCode(): ?string
    {
        return $this->activationCode;
    }

    /**
     * @codeCoverageIgnore
     * @param UserStats|null $stats
     * @return User
     */
    public function setStats(?UserStats $stats): User
    {
        $this->stats = $stats;
        return $this;
    }

    /**
     * @codeCoverageIgnore
     * @return UserStats|null
     */
    public function getStats(): ?UserStats
    {
        return $this->stats;
    }

    /**
     * @codeCoverageIgnore
     * @param Subscription|null $subscription
     * @return User
     */
    public function setSubscription(?Subscription $subscription): User
    {
        $this->subscription = $subscription;
        return $this;
    }

    /**
     * @codeCoverageIgnore
     * @return Subscription|null
     */
    public function getSubscription(): ?Subscription
    {
        return $this->subscription;
    }

    /**
     * @codeCoverageIgnore
     * @param Metadata[]|null $metadata
     * @return User
     */
    public function setMetadata(?array $metadata): User
    {
        $this->metadata = $metadata;
        return $this;
    }

    /**
     * @codeCoverageIgnore
     * @return Metadata[]|null
     */
    public function getMetadata(): ?array
    {
        return $this->metadata;
    }

    /**
     * @codeCoverageIgnore
     * @param Post[]|null $posts
     * @return User
     */
    public function setPosts(?array $posts): User
    {
        $this->posts = $posts;
        return $this;
    }

    /**
     * @codeCoverageIgnore
     * @return Post[]|null
     */
    public function getPosts(): ?array
    {
        return $this->posts;
    }

    /**
     * @codeCoverageIgnore
     * @param Topic[]|null $topics
     * @return User
     */
    public function setTopics(?array $topics): User
    {
        $this->topics = $topics;
        return $this;
    }

    /**
     * @codeCoverageIgnore
     * @return Topic[]|null
     */
    public function getTopics(): ?array
    {
        return $this->topics;
    }


    /**
     * Checks if this User contains at least one instance of a given Metadata
     * @param Metadata $metadata
     * @return bool
     */
    public function containsMetadata(Metadata $metadata): bool
    {
        $result = false;

        if (isset($this->metadata)) {
            $result = array_search($metadata, $this->metadata) !== false;
        }

        return $result;
    }

    /**
     * Adds a Metadata instance to this User if it is not already present
     * @param Metadata $metadata
     * @return User
     */
    public function addMetadata(Metadata $metadata): User
    {
        if (!$this->containsMetadata($metadata)) {
            if (!isset($this->metadata)) {
                $this->metadata = [];
            }
            $this->metadata[] = $metadata;
        }

        return $this;
    }

    /**
     * Removes all instances of a given Metadata from this User
     * @param Metadata $metadata
     * @return User
     */
    public function removeMetadata(Metadata $metadata): User
    {
        if (!isset($this->metadata)) {
            return $this;
        }

        $keys = array_keys($this->metadata, $metadata);
        foreach (array_reverse($keys) as $key) {
            unset($this->metadata[$key]);
        }

        return $this;
    }

    /**
     * Checks if this User contains at least one instance of a given Post
     * @param Post $posts
     * @return bool
     */
    public function containsPost(Post $posts): bool
    {
        $result = false;

        if (isset($this->posts)) {
            $result = array_search($posts, $this->posts) !== false;
        }

        return $result;
    }

    /**
     * Adds a Post instance to this User if it is not already present
     * @param Post $posts
     * @return User
     */
    public function addPost(Post $posts): User
    {
        if (!$this->containsPost($posts)) {
            if (!isset($this->posts)) {
                $this->posts = [];
            }
            $this->posts[] = $posts;
        }

        return $this;
    }

    /**
     * Removes all instances of a given Post from this User
     * @param Post $posts
     * @return User
     */
    public function removePost(Post $posts): User
    {
        if (!isset($this->posts)) {
            return $this;
        }

        $keys = array_keys($this->posts, $posts);
        foreach (array_reverse($keys) as $key) {
            unset($this->posts[$key]);
        }

        return $this;
    }

    /**
     * Checks if this User contains at least one instance of a given Topic
     * @param Topic $topics
     * @return bool
     */
    public function containsTopic(Topic $topics): bool
    {
        $result = false;

        if (isset($this->topics)) {
            $result = array_search($topics, $this->topics) !== false;
        }

        return $result;
    }

    /**
     * Adds a Topic instance to this User if it is not already present
     * @param Topic $topics
     * @return User
     */
    public function addTopic(Topic $topics): User
    {
        if (!$this->containsTopic($topics)) {
            if (!isset($this->topics)) {
                $this->topics = [];
            }
            $this->topics[] = $topics;
        }

        return $this;
    }

    /**
     * Removes all instances of a given Topic from this User
     * @param Topic $topics
     * @return User
     */
    public function removeTopic(Topic $topics): User
    {
        if (!isset($this->topics)) {
            return $this;
        }

        $keys = array_keys($this->topics, $topics);
        foreach (array_reverse($keys) as $key) {
            unset($this->topics[$key]);
        }

        return $this;
    }
}
